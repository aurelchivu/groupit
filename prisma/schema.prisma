// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema      
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Group {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  members     GroupMembers[]
  leader      Member?        @relation(name: "leaderOf", fields: [leaderId], references: [id])
  leaderId    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Member {
  id        String         @id @default(cuid())
  firstName String
  lastName  String
  details   String?
  groups    GroupMembers[]
  leaderOf  Group[]        @relation(name: "leaderOf")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model GroupMembers {
  id        String   @id @default(cuid())
  group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?
  member    Member?  @relation(fields: [memberId], references: [id])
  memberId  String?
  isLeader  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        String?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
